// Generated by CoffeeScript 1.9.1
(function() {
  var AudioManager, Pool;

  Pool = (function() {
    function Pool(arg) {
      this.url = arg.url;
      this.pool = [];
    }

    Pool.prototype.getElement = function() {
      var e, i, len, ref;
      ref = this.pool;
      for (i = 0, len = ref.length; i < len; i++) {
        e = ref[i];
        if (e.paused && (e.currentTime === e.duration || e.currentTime === 0)) {
          return e;
        }
      }
      e = new Audio(this.url);
      this.pool.push(e);
      return e;
    };

    return Pool;

  })();

  module.exports = AudioManager = (function() {
    function AudioManager() {
      this.cache = {};
    }

    AudioManager.prototype.load = function(urls, callback) {
      var _onCanPlayThrough, audio, i, len, pool, results, url;
      if (typeof urls === "string") {
        urls = [urls];
      }
      _onCanPlayThrough = (function() {
        var count;
        count = 0;
        return function() {
          if (++count >= urls.length) {
            return callback();
          }
        };
      })();
      results = [];
      for (i = 0, len = urls.length; i < len; i++) {
        url = urls[i];
        pool = new Pool({
          url: url
        });
        this.cache[url] = pool;
        audio = pool.getElement();
        results.push(audio.addEventListener("canplaythrough", _onCanPlayThrough));
      }
      return results;
    };

    AudioManager.prototype.play = function(url, callback) {
      var audio, pool;
      pool = this.cache[url] || (this.cache[url] = new Pool({
        url: url
      }));
      audio = pool.getElement();
      audio.play();
      if (callback != null) {
        return audio.addEventListener("ended", callback);
      }
    };

    return AudioManager;

  })();

}).call(this);
